app -> webapp -> servlet-api.jar 
app -> spring-core -->

			1) core 
			2) context
			3) bean 
			4) el 
 

why ? 


	spring -> singleton design pattern - create single  object for entire app 



Signup.jsp -> submit-> SignupController -> new UserBean() -> setters 
					   new UserDao() -> insert ->db -->connection open 


500 submit-> singup.jsp =>  SingupController - 1 object 
				USerBean  -1 and UserDao -1    


servlet-container

 
spring-container ---> ioc-container 



1) BeanFactory 
2) ApplicationContext
		2.1) FileSystemXmlApplicationContext
		2.2) ClasspathXmlApplicationContext
		2.3) XmlWeblApplicationContext 
	 
----------------------------------------------------------

 DI -> dependency Injection 
 
 class Student{
 	String name;
 	int rollNum;
 	Address address;
 	CourseBean courseBean; 
 	Student(CoueseBean c){
 	
 	}
 }
 
 CourseBean c = new CourseBean(); 
 Student s = new Student(c);
 
 Student s = new Student();
 CourseBean c = new CourseBean(); 
 s.setCourse(c); 
 
 
 class Address{
 	String city,country;
 	int pincode;
 }
 class CourseBean{
 
 }

UserServlet ---> UserDao --> DbConnection 

1) setter injection [ optional ] 
2) constructor injection --> [required]  student ->course --> 1st course --> ()  


 
 
 





























